AWSTemplateFormatVersion: 2010-09-09
Description: Image Processor
Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Type: AllAtOnce
    Environment:
      Variables:
        ENVIRONMENT:
          Ref: Environment
    MemorySize: 512
    Runtime: nodejs10.x
    Tags:
      PROJECT:
        Ref: ProjectName
      STAGE:
        Ref: Environment
    Tracing: Active
Parameters:
  Environment:
    AllowedValues:
    - dev
    - test
    - prod
    Default: dev
    Type: String
  ProjectName:
    Default: image-processor
    Type: String
Resources:
  ImageMetadataDB:
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
    Type: AWS::DynamoDB::Table
  ImageProcessorS3Bucket:
    Type: AWS::S3::Bucket
  StartExecutionFunction:
    Properties:
      CodeUri: s3://abajowski/f1df6c18dd87a34f6f427daecdd4dec9
      Environment:
        Variables:
          STATE_MACHINE_ARN:
            Ref: StateMachine
      Events:
        BucketImageProcessorS3Bucket:
          Properties:
            Bucket:
              Ref: ImageProcessorS3Bucket
            Events: s3:ObjectCreated:*
          Type: S3
      Handler: ./src/functions/start-execution.handler
      Policies:
      - Statement:
        - Action:
          - s3:Get*
          - s3:List*
          Effect: Allow
          Resource: '*'
        Version: 2012-10-17
      - Statement:
        - Action:
          - states:DescribeExecution
          - states:GetExecutionHistory
          - states:ListExecutions
          - states:StartExecution
          - states:StopExecution
          Effect: Allow
          Resource:
          - Ref: StateMachine
        Version: 2012-10-17
    Type: AWS::Serverless::Function
  StateMachine:
    Properties:
      DefinitionString:
        Fn::Sub:
        - "{\n  \"Comment\": \"A Hello World example of the Amazon States Language\
          \ using Pass states\",\n  \"StartAt\": \"Hello\",\n  \"States\": {\n   \
          \ \"Hello\": {\n      \"Type\": \"Pass\",\n      \"Result\": \"Hello\",\n\
          \      \"Next\": \"World\"\n    },\n    \"World\": {\n      \"Type\": \"\
          Pass\",\n      \"Result\": \"World\",\n      \"End\": true\n    }\n  }\n\
          }"
        - {}
      RoleArn:
        Fn::GetAtt:
        - StateMachineRole
        - Arn
    Type: AWS::StepFunctions::StateMachine
  StateMachineRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              Fn::Sub: states.${AWS::Region}.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource: '*'
            Sid: InvokeLambda
          Version: 2012-10-17
        PolicyName: InvokeLambda
    Type: AWS::IAM::Role
Transform: AWS::Serverless-2016-10-31
